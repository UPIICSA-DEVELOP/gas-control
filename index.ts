require('zone.js/dist/zone-node');
const express = require('express');
const compression = require('compression');
const { enableProdMode  } = require('@angular/core');
const path = require('path');
const nconf = require('nconf');
const domino = require('domino');
const fs = require('fs');

nconf.argv().env().file({ file: 'config.json' });

async function index(){
  return await fs.readFileSync(path.resolve(__dirname, 'browser/index.html'), 'utf8');
}

index().then((index) => {
  const win = domino.createWindow(index);
  global['window'] = win;
  global['document'] = win.document;
});


function logErrors(err, req, res, next) {
  console.error(err.stack);
  next(err);
}

enableProdMode();

const app = express();
app.use(compression({ level: 9, memLevel: 9}));
app.use(logErrors);

const ngUniversal = require('@nguniversal/express-engine');

/* The server bundle is loaded here, it's why you don't want a changing hash in it */
const appServer = require('./dist/server/main');

/* Server-side rendering */
function angularRouter(req, res) {

  /* Server-side rendering */
  res.header("X-Powered-By",' MapLander').status(200).render('index', { req, res });
}

/* Root route before static files, or it will serve a static index.html, without pre-rendering */
app.get('/', angularRouter);

/* Serve the static files generated by the CLI (index.html, CSS? JS, assets...) */
app.use(express.static(path.resolve(__dirname, 'browser'), {
  setHeaders: function(res, path) {
    res.set("X-Powered-By",' MapLander');
  }
}));


/* Configure Angular Express engine */
app.engine('html', ngUniversal.ngExpressEngine({
  bootstrap: appServer.AppServerModuleNgFactory
}));
app.set('view engine', 'html');
app.set('views', path.resolve(__dirname, 'browser'));

/* Direct all routes to index.html, where Angular will take care of routing */
app.get('*', angularRouter);

app.listen(8080, () => {
  console.log('Value of environment is',nconf.get('ENV') || 'dev');
  console.log(`Listening on http://localhost:8080`);
});

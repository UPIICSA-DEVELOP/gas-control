require('zone.js/dist/zone-node');
const { fork } = require('child_process');
const axios = require('axios');
const express = require('express');
const compression = require('compression');
const { enableProdMode  } = require('@angular/core');
const path = require('path');
const nconf = require('nconf');
const domino = require('domino');
const fs = require('fs');

nconf.argv().env().file({ file: 'config.json' });

async function index(){
  return await fs.readFileSync(path.resolve(__dirname, 'browser/index.html'), 'utf8');
}

function searchPath(url, type){
  let path = null;
  let urlCopy;
  if(url.includes('detail')){
    urlCopy = url.replace('/detail/', '');
    urlCopy = urlCopy.split('-');
    switch (type){
      case 'property':
        path = urlCopy[0];
        break;
      case 'offering':
        path = urlCopy[2];
        break;
    }
  }else if(url.includes('https://maplander.com/property/')){
    urlCopy = url.replace('https://maplander.com/property/', '');
    urlCopy = urlCopy.split('/');
    switch (type){
      case 'property':
        path = urlCopy[0];
        break;
      case 'offering':
        path = urlCopy[1];
        break;
    }
  }
  return path;
}



index().then((index) => {
  const win = domino.createWindow(index);
  global['window'] = win;
  global['document'] = win.document;
});




function logErrors(err, req, res, next) {
  console.error(err.stack);
  next(err);
}

enableProdMode();

const app = express();
app.use(compression({ level: 9, memLevel: 9}));
app.use(logErrors);

const ngUniversal = require('@nguniversal/express-engine');

/* The server bundle is loaded here, it's why you don't want a changing hash in it */
const appServer = require('./dist/server/main');

/* Server-side rendering */
function angularRouter(req, res) {

  /* Server-side rendering */
  res.header("X-Powered-By",' MapLander').status(200).render('index', { req, res });
}

/* Root route before static files, or it will serve a static index.html, without pre-rendering */
app.get('/', angularRouter);

/* Serve the static files generated by the CLI (index.html, CSS? JS, assets...) */
app.use(express.static(path.resolve(__dirname, 'browser'), {
  setHeaders: function(res, path) {
    res.set("X-Powered-By",' MapLander');
  }
}));


/* Configure Angular Express engine */
app.engine('html', ngUniversal.ngExpressEngine({
  bootstrap: appServer.AppServerModuleNgFactory
}));
app.set('view engine', 'html');
app.set('views', path.resolve(__dirname, 'browser'));

app.get("/firebase-messaging-sw.js", (req, res) => {
  res.sendFile(path.resolve(__dirname, "browser", "firebase-messaging-sw.js"));
});

app.all('*/detail/**', function (req, res) {
  res.header("X-Powered-By",' MapLander');
  try{
    if(req.query.property){
      const propertyType = searchPath(req.url, 'property');
      const offeringType = searchPath(req.url, 'offering');
      res.status(301).redirect('/property/'+propertyType+'/'+offeringType+'/'+req.query.property);
    }else{
      let clearUrl = req.url.split('/');
      clearUrl = clearUrl.filter((e) => {return e});
      validateProperty(clearUrl[1]).then((response) => {
        switch (response.data.code){
          case 200:
            const propertyType = searchPath(response.data.url, 'property');
            const offeringType = searchPath(response.data.url, 'offering');
            res.status(301).redirect('/property/'+propertyType+'/'+offeringType+'/'+clearUrl[1]);
            break;
          default:
            res.status(404);
            res.render('index', { url: req.url });
            break;
        }
      }).catch((error) => {
        console.log(error);
        res.status(301).redirect('/');
      });
    }
  }catch(e){
    console.log('Failed request in detail ', e);
    res.status(301).redirect('/');
  }
});

app.all('*/property/**', function (req, res, next) {
  res.header("X-Powered-By",' MapLander');
  try{
    const regex = /([0-9])+$/;
    let id = req.url;
    id = id.match(regex);
    id = id[0];
    validateProperty(id).then((response) => {
      switch (response.data.code){
        case 200:
          next();
          break;
        default:
          res.status(404);
          res.render('index', { url: req.url });
          break;
      }
    }).catch(error => {
      console.log('Failed request in property ' + error);
      res.status(301).redirect('/');
    });
  }catch(e){
    console.log(e);
    res.status(301).redirect('/');
  }
});

app.get('/sitemap.xml', function (req, res, next) {
  getUrlsForSiteMap().then((response: any) => {
    const convert = require('xml-js');
    const json = response.data;
    const date = new Date();
    const options = {compact: false, spaces: 4, textFn: function (value, currentElementName, currentElementObj) {
        let val = null;
        if(currentElementName === 'lastmod'){
          val = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + ((date.getDate()<10?'0':'') + date.getDate());
        }else{
          val = value;
        }
        return val;
      }};
    const result = convert.json2xml(json.index, options);
    res.header('Content-Type', 'application/xml');
    res.send(result);
  }).catch(error => {
    console.log(error);
    next();
  });
});

app.get('/sites/**', function (req, res, next) {
  let siteUrl = decodeURIComponent(req.url).replace('/sites/', '');
  siteUrl = siteUrl.replace('.xml', '');
  getUrlsForSiteMap().then((response: any) => {
    const convert = require('xml-js');
    const json = response.data;
    const date = new Date();
    const options = {compact: false, spaces: 4, textFn: function (value, currentElementName, currentElementObj) {
        let val = null;

        if(currentElementName === 'lastmod'){
          val = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + ((date.getDate()<10?'0':'') + date.getDate());
        }else{
          val = value;
        }
        return val;
      }};
    const result = convert.json2xml(json[siteUrl], options);
    res.header('Content-Type', 'application/xml');
    res.send(result);
  }).catch(error => {
    console.log(error);
    next();
  });
});

app.get('/bot', function (req, res) {
  try {
    const process = fork(path.resolve(__dirname, 'bot.js'));
    process.on('message', () => {
      console.log('Process for bot finished');
    });
    res.send('Bot initiated');
  }catch (e){
    res.send('Bot not initiated' + e);
  }
});

/* Direct all routes to index.html, where Angular will take care of routing */
app.get('*', angularRouter);

app.listen(8080, () => {
  console.log('Value of environment is',nconf.get('ENV') || 'dev');
  console.log(`Listening on http://localhost:8080`);
});


function validateProperty(id: string): Promise<any>{
  return  axios({
    method: 'post',
    url: 'https://2-dot-inmobimapa-backend.appspot.com/_ah/api/communicationchannel/v1/propertyExists?id='+id,
    headers: {'Content-type': 'application/json; charset=utf-8'}
  });
}

function getUrlsForSiteMap(): Promise<any>{
  const url = (nconf.get('ENV') && nconf.get('ENV')==='prod')
    ?'https://storage.googleapis.com/maplander-public.appspot.com/sitemap/sitemap.json'
    :'https://storage.googleapis.com/maplander-front-develop.appspot.com/sitemap/sitemap.json';
  return  axios({
    method: 'get',
    url: url,
    headers: {'Content-type': 'application/json; charset=utf-8'}
  });
}
